{"ast":null,"code":"var _jsxFileName = \"/Users/tobiasbrenner/dev/test/batest/client/src/components/FormWithHook.tsx\";\nimport React from \"react\";\nimport axios from \"axios\";\nimport { withFormik, Form, Field } from \"formik\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst InnerForm = props => {\n  const {\n    touched,\n    errors,\n    isSubmitting,\n    message\n  } = props;\n  return /*#__PURE__*/_jsxDEV(Form, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Field, {\n      type: \"email\",\n      name: \"email\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this), touched.email && errors.email && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: errors.email\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 41\n    }, this), /*#__PURE__*/_jsxDEV(Field, {\n      type: \"password\",\n      name: \"password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), touched.password && errors.password && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: errors.password\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 47\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      disabled: isSubmitting,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n};\n\n_c = InnerForm;\nconst FormWithHook = withFormik({\n  mapPropsToValues: props => {\n    return {\n      email: props.initialEmail || \"\",\n      password: \"\"\n    };\n  },\n  validate: values => {\n    let errors = {};\n\n    if (!values.email) {\n      errors.email = \"Required\";\n    } // else if (!isValidEmail(values.email)) {\n    //   errors.email = \"Invalid email address\";\n    // }\n\n\n    return errors;\n  },\n  handleSubmit: async values => {\n    console.log(\"Submitted\", values);\n    let res = await axios.post(\"http://localhost:5000/login\", values);\n    console.log(\"res:: -> \", res);\n  }\n})(InnerForm);\nexport default FormWithHook;\n\nvar _c;\n\n$RefreshReg$(_c, \"InnerForm\");","map":{"version":3,"sources":["/Users/tobiasbrenner/dev/test/batest/client/src/components/FormWithHook.tsx"],"names":["React","axios","withFormik","Form","Field","InnerForm","props","touched","errors","isSubmitting","message","email","password","FormWithHook","mapPropsToValues","initialEmail","validate","values","handleSubmit","console","log","res","post"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,EAAkCC,IAAlC,EAAwCC,KAAxC,QAAmE,QAAnE;;;AAWA,MAAMC,SAAS,GAAIC,KAAD,IAAiD;AACjE,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,MAAX;AAAmBC,IAAAA,YAAnB;AAAiCC,IAAAA;AAAjC,MAA6CJ,KAAnD;AACA,sBACE,QAAC,IAAD;AAAA,4BACE;AAAA,gBAAKI;AAAL;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,KAAD;AAAO,MAAA,IAAI,EAAC,OAAZ;AAAoB,MAAA,IAAI,EAAC;AAAzB;AAAA;AAAA;AAAA;AAAA,YAFF,EAGGH,OAAO,CAACI,KAAR,IAAiBH,MAAM,CAACG,KAAxB,iBAAiC;AAAA,gBAAMH,MAAM,CAACG;AAAb;AAAA;AAAA;AAAA;AAAA,YAHpC,eAKE,QAAC,KAAD;AAAO,MAAA,IAAI,EAAC,UAAZ;AAAuB,MAAA,IAAI,EAAC;AAA5B;AAAA;AAAA;AAAA;AAAA,YALF,EAMGJ,OAAO,CAACK,QAAR,IAAoBJ,MAAM,CAACI,QAA3B,iBAAuC;AAAA,gBAAMJ,MAAM,CAACI;AAAb;AAAA;AAAA;AAAA;AAAA,YAN1C,eAQE;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,QAAQ,EAAEH,YAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YARF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAcD,CAhBD;;KAAMJ,S;AAuBN,MAAMQ,YAAY,GAAGX,UAAU,CAA0B;AACvDY,EAAAA,gBAAgB,EAAGR,KAAD,IAAW;AAC3B,WAAO;AACLK,MAAAA,KAAK,EAAEL,KAAK,CAACS,YAAN,IAAsB,EADxB;AAELH,MAAAA,QAAQ,EAAE;AAFL,KAAP;AAID,GANsD;AAOvDI,EAAAA,QAAQ,EAAGC,MAAD,IAAwB;AAChC,QAAIT,MAAgC,GAAG,EAAvC;;AACA,QAAI,CAACS,MAAM,CAACN,KAAZ,EAAmB;AACjBH,MAAAA,MAAM,CAACG,KAAP,GAAe,UAAf;AACD,KAJ+B,CAKhC;AACA;AACA;;;AACA,WAAOH,MAAP;AACD,GAhBsD;AAiBvDU,EAAAA,YAAY,EAAE,MAAOD,MAAP,IAAkB;AAC9BE,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBH,MAAzB;AACA,QAAII,GAAG,GAAG,MAAMpB,KAAK,CAACqB,IAAN,CAAW,6BAAX,EAA0CL,MAA1C,CAAhB;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBC,GAAzB;AACD;AArBsD,CAA1B,CAAV,CAsBlBhB,SAtBkB,CAArB;AAwBA,eAAeQ,YAAf","sourcesContent":["import React from \"react\";\nimport * as Yup from \"yup\";\nimport axios from \"axios\";\nimport { withFormik, FormikProps, Form, Field, FormikErrors } from \"formik\";\n\ninterface FormValues {\n  email: string;\n  password: string;\n}\n\ninterface OtherProps {\n  message: string;\n}\n\nconst InnerForm = (props: OtherProps & FormikProps<FormValues>) => {\n  const { touched, errors, isSubmitting, message } = props;\n  return (\n    <Form>\n      <h1>{message}</h1>\n      <Field type=\"email\" name=\"email\"></Field>\n      {touched.email && errors.email && <div>{errors.email}</div>}\n\n      <Field type=\"password\" name=\"password\"></Field>\n      {touched.password && errors.password && <div>{errors.password}</div>}\n\n      <button type=\"submit\" disabled={isSubmitting}>\n        Submit\n      </button>\n    </Form>\n  );\n};\n\ninterface MyFormProps {\n  initialEmail?: string;\n  message: string;\n}\n\nconst FormWithHook = withFormik<MyFormProps, FormValues>({\n  mapPropsToValues: (props) => {\n    return {\n      email: props.initialEmail || \"\",\n      password: \"\",\n    };\n  },\n  validate: (values: FormValues) => {\n    let errors: FormikErrors<FormValues> = {};\n    if (!values.email) {\n      errors.email = \"Required\";\n    }\n    // else if (!isValidEmail(values.email)) {\n    //   errors.email = \"Invalid email address\";\n    // }\n    return errors;\n  },\n  handleSubmit: async (values) => {\n    console.log(\"Submitted\", values);\n    let res = await axios.post(\"http://localhost:5000/login\", values);\n    console.log(\"res:: -> \", res);\n  },\n})(InnerForm);\n\nexport default FormWithHook;\n"]},"metadata":{},"sourceType":"module"}